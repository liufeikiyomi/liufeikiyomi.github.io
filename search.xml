<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>word添加参考文献</title>
      <link href="/2022/06/01/word-zen-yang-gei-lun-wen-tian-jia-yin-yong-can-kao-wen-xian/"/>
      <url>/2022/06/01/word-zen-yang-gei-lun-wen-tian-jia-yin-yong-can-kao-wen-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、添加参考文献"><a href="#一、添加参考文献" class="headerlink" title="一、添加参考文献"></a>一、添加参考文献</h3><p>按照如图①②③④步骤，创建参考文献的编号格式。</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/1.png" alt="1"></p><p>鼠标放在参考文献第一行，找到创建的参考文献标号进行标号。</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/2.png" alt="2"></p><h3 id="二、交叉引用参考文献"><a href="#二、交叉引用参考文献" class="headerlink" title="二、交叉引用参考文献"></a>二、交叉引用参考文献</h3><p>鼠标定位在要引用位置，找到【插入】或者【引用】中的交叉引用。</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/3.png" alt="3"></p><p>按图中设置，选择自己要插入的参考文献，然后插入-关闭。</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/4.png" alt="4"></p><p>将编号变成参考文献的右上角标号格式。选中[1]，点击【开始】中的X^2</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/5.png" alt="5"></p><h3 id="三、交叉引用多篇参考文献"><a href="#三、交叉引用多篇参考文献" class="headerlink" title="三、交叉引用多篇参考文献"></a>三、交叉引用多篇参考文献</h3><p>按照之前引用参考文献方法，将引用的第一篇和最后一篇插入文中。例如第二篇和第四篇（想要引用2~4篇，参考文献格式为[ 2 − 4 ] ^{[2-4]} [2−4]）。</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/6.png" alt="6"></p><p>修改[2][4]。选中[2]，鼠标右击，找到【切换域代码(T)】，点击进入添加”#[0”，鼠标定位在这个公式上，鼠标右击，找到【更新域(U)】,点击更新。这样就修改好了一半。</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/7.png" alt="7"></p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/8.png" alt="8"></p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/9.png" alt="9"></p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/10.png" alt="10"></p><p>修改另一半。操作同上，选中[4]，右键找到【切换域代码】,添加”#0]”，更新域。</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/11.png" alt="11"></p><p>在[24]中间加入-，再添加右上角角标，即可。</p><p><img src="/%E3%80%90Word%E3%80%91%E6%80%8E%E6%A0%B7%E7%BB%99%E8%AE%BA%E6%96%87%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.assets/12.png" alt="12"></p><p>————————————————<br>版权声明：本文为CSDN博主「酸梅果茶」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_41821678/article/details/105928607">https://blog.csdn.net/qq_41821678/article/details/105928607</a></p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word </tag>
            
            <tag> 参考文献 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络复习</title>
      <link href="/2022/05/29/ji-suan-ji-wang-luo-fu-xi/"/>
      <url>/2022/05/29/ji-suan-ji-wang-luo-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络复习"><a href="#计算机网络复习" class="headerlink" title="计算机网络复习"></a>计算机网络复习</h1><h2 id="第一章计算机网络"><a href="#第一章计算机网络" class="headerlink" title="第一章计算机网络"></a>第一章计算机网络</h2><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AF%BC%E5%9B%BE.png" alt="第一章导图"></p><h3 id="1-2概念及功能"><a href="#1-2概念及功能" class="headerlink" title="1.2概念及功能"></a>1.2概念及功能</h3><blockquote><p>三大网络：</p><p>计算机网络、有线电视网络、电信网络</p></blockquote><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E6%A6%82%E5%BF%B5%E5%AF%BC%E5%9B%BE.png" alt="概念导图"></p><h5 id="计算机网络："><a href="#计算机网络：" class="headerlink" title="计算机网络："></a>计算机网络：</h5><p>是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现的资源共享和信息传递的系统。</p><p><u>ps:这个连接可以是有线的，也可能是无线的，比如Android手机连接路由器。</u></p><p><strong>计算机网络是互连的、自治的计算机集合</strong></p><p>互连：通过通信链路互联互通</p><p>自治：无主从关系</p><h6 id="计算机网络的功能："><a href="#计算机网络的功能：" class="headerlink" title="计算机网络的功能："></a>计算机网络的功能：</h6><p>1、数据通信</p><p>2、资源共享：同一个计算机网络上的其他计算机可以使用某台计算机的计算机资源的行为，可共享硬件、软件、数据。</p><p>3、分布式处理：多台计算机可以各自承担同意工作任务的不同部分 </p><p>4、提高可靠性：因为有分布式处理，网络中一台电脑如果宕机，那么会有替代机来帮助他完成任务</p><p>5、负载均衡：因为有分布式处理，所以计算机各自承担任务和负载，计算机之间也更加亲密</p><h6 id="计算机网络发展"><a href="#计算机网络发展" class="headerlink" title="计算机网络发展"></a>计算机网络发展</h6><p>第一阶段：ARPAnet阿帕网→互联网（1983年阿帕网接受TCP/IP选定Internet为主要计算机通信系统</p><p><strong>网络把许多计算机连接在一起，而互联网则把许多网络连接在一起，因特网是世界上最大的互联网</strong></p><p>第二阶段（三级结构）：1985年起，没过国家科学基金会NSF围绕6个大型计算机中心建设计算机网络，即国家科学基金网NSFNET。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5.png" alt="第二阶段"></p><p>​随着用户的增多，第三层太多管理不过来，所以发展到第三阶段</p><p>第三阶段（多层ISP结构）：ISP（因特网服务提供者/因特网服务提供商)：是一个向广大用户综合提供互联网接入业务，信息业务和增值业务的公司。<br><strong>网络管理权限下放给运行商。</strong></p><p>交网费就是交给ISP。ISP服务费。</p><p>分为主干ISP、地区ISP和本地ISP（沿用了第二阶段的三层结构）</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5.png" alt="第三阶段"></p><p>IXP（因特网交换点）：大大提高信息传递和资源共享的速度。不必每次传输信息都经过层层结构。</p><h3 id="1-3-组成与分类"><a href="#1-3-组成与分类" class="headerlink" title="1.3 组成与分类"></a>1.3 组成与分类</h3><h5 id="计算机网络的组成："><a href="#计算机网络的组成：" class="headerlink" title="计算机网络的组成："></a>计算机网络的组成：</h5><p><strong>1、组成部分</strong>：硬件、软件、协议（一系列规则和约定的集合）</p><p><strong>2、工作方式：</strong></p><p>​（1、<u>边缘部分</u>：一系列端系统组成：计算机、服务器、大型计算机、小到摄像头</p><pre><code>        1. C/S方式：客户/服务器方式，两个端系统之间的进程是服务与被服务方式（B/S方式：Browser浏览器，客户主体不一样，CS一般要下载软件、APP等），主机越多（客户端越多），速度越慢：服务器依次服务。        1. P2P方式：peer-to-peer（对等的连接），主机即是客户又是服务器。主机越多，下载越快（人人为我，我为人人）。</code></pre><p>​（2、<u>核心部分</u>：提供服务，使边缘部分端系统与端系统实现通信（进程之间的通信）</p><p><strong>3、功能组成：</strong></p><p>根据计算机网络数据通信和资源共享的功能</p><ol><li><p>通信子网：实现数据通信</p></li><li><p>资源子网：实现资源共享/数据处理</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E5%8A%9F%E8%83%BD%E7%BB%84%E6%88%90.png" alt="功能组成"></p></li></ol><p>传输层：弥补上三层与下三层之间的差别。上三层主要面向用户。</p><h5 id="计算机网络的分类："><a href="#计算机网络的分类：" class="headerlink" title="计算机网络的分类："></a>计算机网络的分类：</h5><ol><li>按分布范围：广域网WAN、城域网MAN、局域网LAN（一个学校、公司等）、个人区域网PAN（10米左右）。</li></ol><p>广域网：交换技术。通过路由器等将信息分组交换转发出去</p><p>局域网：广播技术。好比村里的喇叭</p><p>区分要看使用的是什么技术。</p><ol start="2"><li><p>按使用者分：</p><ol><li>公用网</li><li>专用网：军队等</li></ol></li><li><p>按交换技术分：</p><ol><li>电路交换：如打电话。建立好连接，一直占用资源，结束后释放资源。</li><li>报文交换：存储转发技术，完整报文发送。</li><li>分组交换：存储转发技术，把报文分组切开再转发。</li></ol></li><li><p>按拓扑结构分：</p><p>拓扑结构：主机、路由器等结点用小圆圈表示，通信线路用线表示。</p><ol><li>总线型</li><li>星型</li><li>环形</li><li>网状型：常用于广域网</li></ol></li><li><p>按传输技术分：</p><ol><li>广播式网络： 共享公共通信信道。所有人都可以收到</li><li>点对点网络： 使用分组存储转发和路由选择机制。</li></ol><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E7%BB%84%E6%88%90%E4%B8%8E%E5%88%86%E7%B1%BB.png" alt="组成与分类"></p></li></ol><h3 id="1-4标准化工作及相关组织"><a href="#1-4标准化工作及相关组织" class="headerlink" title="1.4标准化工作及相关组织"></a>1.4标准化工作及相关组织</h3><p>要实现不同厂商的硬、软件之间的相互连通，必须遵从统一的标准！</p><h5 id="标准的分类："><a href="#标准的分类：" class="headerlink" title="标准的分类："></a>标准的分类：</h5><ol><li>法定标准：由权威机构制定的正式的、合法的标准  OSI</li><li>事实标准：某些公司的产品在竞争中占据主流，时间长了，这些产品的协议和技术就成了标准。 TCP/IP。</li></ol><h5 id="RFC（Request-For-Comments）——因特网标准形式"><a href="#RFC（Request-For-Comments）——因特网标准形式" class="headerlink" title="RFC（Request For Comments）——因特网标准形式"></a>RFC（Request For Comments）——因特网标准形式</h5><p>RFC上升为因特网正式标准四个阶段：</p><ol><li>因特网草案（Internet Draft）发送给<a href="mailto:rfc-editor@rfc-editor.org">rfc-editor@rfc-editor.org</a></li><li>建议标准（Proposed Standard） ：开始成为RFC文档</li></ol><p>​草案通过后成为建议标准，RFC文档发到网上，大家一起完善形成草案标准</p><pre><code>3. 草案标准（Draft Standard）：经由IETF、IAB审核，通过后成为因特网标准</code></pre><p>2011年取消第三阶段，二三阶段合并为建议标准</p><ol start="4"><li>因特网标准。</li></ol><h5 id="标准化工作相关组织"><a href="#标准化工作相关组织" class="headerlink" title="标准化工作相关组织"></a>标准化工作相关组织</h5><ol><li>国际标准化组织ISOOSI模型、HDLC协议</li><li>国际电信联盟ITU      制定通信规则</li><li>电器盒电子工程师协会IEEE      学术机构、IEEE802系列标准、5G</li><li>Internet工程任务组IETF     负责因特网相关标准的制定   RFC XXXX</li></ol><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E6%A0%87%E5%87%86%E5%8C%96%E7%BB%84%E7%BB%87.png" alt="标准化组织"></p><h3 id="1-5性能指标"><a href="#1-5性能指标" class="headerlink" title="1.5性能指标"></a>1.5性能指标</h3><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>​速率即<strong>数据率</strong>或称<strong>数据传输率</strong>或<strong>比特率</strong></p><p>​连接在计算机网络上的主机在数字信道上传送数据<strong>位数的速率</strong>。</p><p>​单位 b/s，kb/s，mB/s，Gb/s，Tb/s，各单位之间是10^3^的倍数关系，1kb/s=10^3b/s。</p><p>​而存储容量之间是2^10^的倍数关系，1KB=2^10^B=1024B=1024*8b</p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>（1）带宽原本指某个信号具有频带宽度，即最高频率与最低频率之差，单位是赫兹Hz。</p><p>（2）计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的“<strong>最高数据率</strong>”。单位是“比特每秒”，b/s，kb/s。==网络设备所支持的最高速度==</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>表示单位时间内通过某个网络（或信道、接口）的数据量。单位b/s/，Mb/s等</p><p>吞吐量受网络的带宽或网络的额定速率的限制。</p><p>（实际传输量，小于带宽，带宽为最高）</p><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>指数据（报文/分组/比特流）从网络（或链路）的一段传送到另一端所需的时间。也叫<strong>延迟</strong>或<strong>迟延</strong>。</p><ol><li>发送时延=数据长度/信道带宽（发送速率）。（主机把信息完全送到信道上的时间）</li><li>传播时延=信道长度/电磁波在信道上的传播速率（取决于电磁波传播速率和链路长度）。传播速率一般为2*10^8^</li><li>排队时延   （等待输出/输入链路可用）</li><li>处理时延   （检错，找出口）</li></ol><p>==高速链路==：提高信道带宽</p><h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><p>时延带宽积=传播时延×带宽。</p><p>bit= s×b/s</p><p>==信道上所有的比特的数量==</p><h4 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h4><p>（游戏延迟460ms）</p><p>定义：<strong>从发送方发送数据开始，到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延。</strong></p><p>RTT越大，在收到确认之前，可以发送的数据越多（等待时间越长）</p><p><strong>RTT包括</strong></p><ol><li>往返传播时延：传播时延*2</li><li>末端处理时间</li></ol><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><ol><li>信道利用率</li></ol><p>​有数据用过的时间/总时间（有+无数据通过时间）</p><ol start="2"><li>网络利用率</li></ol><p>​信道利用率加权平均值</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87.png" alt="性能指标"></p><h3 id="1-6-分层结构、协议、接口、服务"><a href="#1-6-分层结构、协议、接口、服务" class="headerlink" title="1.6 分层结构、协议、接口、服务"></a>1.6 分层结构、协议、接口、服务</h3><p>为什么要分层？-端与端之间联系要做很多准备工作（建立连接，确保接收方有足够的内存，确保接收方开机等等），很难一起解决，所以分多层，每层负责一部分。 </p><h4 id="分层基本原则"><a href="#分层基本原则" class="headerlink" title="分层基本原则"></a>分层基本原则</h4><ol><li>各层之间相互独立，每层只实现一种相对独立的功能。</li><li>每层之间界面自然清晰，易于理解，交流尽可能少。</li><li>结构上可分隔开。每层都采用最合适的技术来实现。</li><li>保持下层对上层的独立性，上层单向使用下层提供的服务。</li><li>整个分层结构应该能促进标准化工作。</li></ol><h4 id="正式认识分层结构"><a href="#正式认识分层结构" class="headerlink" title="正式认识分层结构"></a>正式认识分层结构</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84.png" alt="分层结构"></p><h4 id="概念总结"><a href="#概念总结" class="headerlink" title="概念总结"></a>概念总结</h4><p>网络体系结构是从<strong>功能</strong>上描述计算机网络结构的。</p><p>计算机网络体系结构建成网络体系结构是<strong>分层结构</strong>。</p><p>每层遵循某个/些<strong>网络协议</strong>以完成本层功能。</p><p><strong>计算机网络体系结构</strong>是计算家网络的各层及其协议的集合。</p><p>第n层向第n+1层提供服务时，此服务不仅包含第n层本身的功能，还包含由下层服务提供的功能。</p><p>仅仅在<strong>相邻层</strong>有接口，且所有提供服务的具体实现细节对上一层完全屏蔽。</p><p>体系结构是抽象的，而实现是指能运行的一些软件和硬件。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E5%88%86%E5%B1%82%E5%AF%BC%E5%9B%BE.png" alt="分层导图"></p><p>计算机网络分层结构：</p><ol><li>7层OSI参考模型法定标准</li><li>4层TCP/IP参考模型      事实标准（用户体验更好，市场需求）</li><li>根据上面两个参考模型，我们总结出5层体系结构，是抽象的，方便我们学习的。</li></ol><h3 id="1-7OSI参考模型"><a href="#1-7OSI参考模型" class="headerlink" title="1.7OSI参考模型"></a>1.7OSI参考模型</h3><h4 id="ISO-x2F-OSI参考模型的由来"><a href="#ISO-x2F-OSI参考模型的由来" class="headerlink" title="ISO/OSI参考模型的由来"></a>ISO/OSI参考模型的由来</h4><blockquote><p>IBM公司第一个提出网络体系结构SNA，还有DEC的DNA、美国国防部的TCP/IP等，用户只有使用他们的产品才能使用该体系结构，不方便相互连接交流。</p></blockquote><p>​目的：支持异构网络系统的互联互通</p><p>​国际标准化组织（ISO）于1984年提出开放系统互连（OSI）参考模型，但是理论成功，市场失败。</p><blockquote><p>原因：</p><ol><li>OSI专家们缺乏实际经验（纸上谈兵？）</li><li>OSI协议实现复杂，效率低</li><li>OSI标准制定周期时间长，没法及时进入市场</li><li>OSI层次划分不太合理，有的功能在不同层都出现，不适合市场。</li></ol></blockquote><p>​TCP/IP胜出！</p><h4 id="ISO-x2F-OSI参考模型"><a href="#ISO-x2F-OSI参考模型" class="headerlink" title="ISO/OSI参考模型"></a>ISO/OSI参考模型</h4><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/ISO%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.png" alt="ISO参考模型"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/OSI%E8%A7%A3%E9%87%8A%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B.png" alt="OSI解释通信过程"></p><p>相同层之间遵循相同的协议，知道哪部分是首部（/尾部），添加/去除包装信息，传给下/上一层。两端用户之间只能看到data信息。</p><h5 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h5><p>用户与网络的界面。</p><p>所有能和用户交互产生网络流量的程序。（需要联网的程序）</p><p><strong>典型应用层服务：</strong></p><ul><li>文件传输（FTP）</li><li>电子邮件（SMTP）</li><li>万维网（HTTP）</li><li>……</li></ul><h5 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h5><p>呈现在用户面前的形式、内容</p><p>用于处理在两个通信系统中交换信息的表达方式（语法和语义）</p><p>功能：</p><ol><li>数据格式变换（翻译）</li></ol><p>​将0101等转化为各种类型的文件，比如png图片</p><ol start="2"><li>数据加密和解密</li></ol><p>​防止被抓包直接读取信息。</p><pre><code>3. 数据压缩和恢复</code></pre><p>​比如视频时，图像文件太大，要压缩以后再传输，接收方要解压，然后呈现视频。</p><p>表示层在五层结构和TCP/IP里被纳入到应用层会话层，所以没什么单独的协议。</p><p>有关协议有JEPG、ASCII等，不考。</p><h5 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h5><p>建立好连接，然后数据才能传输。</p><p><strong>向表示层实体/用户进程提供建立连接并在连接上==有序==地传输数据。</strong>叫做会话，也叫==建立同步==（SYN）。</p><p>会话之间相互独立，不会影响。</p><p><strong>功能</strong>：</p><ol><li>建立、管理、终止会话</li><li>使用校验点可使会话在通信失败时从校验点/同步点继续恢复通信，实现数据同步。（适用于传输大文件）</li></ol><p>主要协议：ADSP、ASP。不考</p><h5 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h5><p>**负责主机中==两个进程==的通信，即==端到端==的通信。传输单位是==报文段或用户数据报==**。</p><p>功能：</p><ol><li>可靠传输、不可靠传输</li></ol><p>​可靠传输：接收端发送确认信息，如果发送端没收到，则重新发送信息。（耗时麻烦）</p><p>​不可靠传输：不建立连接，也不确认。通常用于一些小的信息。</p><ol start="2"><li><p>差错控制：有数据段报文等发生失序、丢失。传输层负责纠正错误。</p></li><li><p>流量控制：根据双方发送、接收能力，调节传送速率、</p></li><li><p>复用分用：</p><ol><li>复用：多个应用层进程可同时使用下面运输层的服务</li><li>分用：运输层把收到的信息分别交付给上面应用层中相应的进程。</li></ol></li></ol><p>主要协议：TCP、UDP</p><h5 id="网络层"><a href="#网络层" class="headerlink" title="网络层*"></a>网络层*</h5><p>主要任务是把==分组==从源端传送到目的端，为分组交换网上的不同主机提供通信服务，网络层传输单位是==数据报==。（数据报过长时要切割成分组）</p><p>功能：</p><ol><li>路由选择：根据网络情况和路由选择算法等选出传输数据的最佳路径</li><li>流量控制：协调发送端和接收端的传输速率（限制发送方的速率）</li><li>差错控制：通信结点之前约定一些规则（奇偶校验码等），接收方检查分组是否有错误，如果能纠错则纠错，不能纠错则丢掉，确保传输层提交的数据是正确的。</li><li>拥塞控制：若所有节点（主机、中间系统）都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解拥塞。</li></ol><p>主要协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF等</p><h5 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h5><p>主要任务：把网络层传下来的数据报<strong>组装成帧</strong>。</p><p>数据链路层/链路层的传输单位是==<strong>帧</strong>==</p><p>功能：</p><ol><li>成帧：定义帧的开始和结束。</li><li>差错控制    帧错+位错，可以检错，也可以纠错（部分）</li><li>流量控制    如果接收方的缓存不够用，就要丢掉。这时候告诉发送方慢点发。</li><li>访问（接入）控制    控制对（共享）信道的访问。广播式网络中，同一时间只有一台主机能占用信道发送信息，其他人都在监听状态。</li></ol><p>主要协议：SDLC、HDLC、PPP、STP</p><h5 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h5><p>​将比特流转成电信号的形式，进行传输，不需要任何加工</p><p>主要任务：在物理媒体上实现比特流的<strong>透明传输</strong>。</p><p>物理层的传输单位是<strong>比特</strong>。</p><p>透明传输：不管所传数据是什么样的比特组合，都应当能够在链路上传送。</p><p>功能：</p><ol><li>定义接口特行：确认连接电缆的插头有多少引脚、每个引脚怎么连接</li><li>定义传输模式：单工、半双工、双工。</li><li>定义传输速率    发送端的发送速率等由物理层定义。</li><li>比特同步     保证比特的同步</li><li>比特编码     拆分、曼彻斯特编码等，用什么电压表示0/1</li></ol><p>主要协议：Rj45、802.3</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/OSI.png" alt="OSI"></p><h3 id="1-8TCP-x2F-IP参考模型"><a href="#1-8TCP-x2F-IP参考模型" class="headerlink" title="1.8TCP/IP参考模型"></a>1.8TCP/IP参考模型</h3><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/TCP%E4%B8%8EOSI.png" alt="TCP与OSI"></p><h5 id="OSI与TCO参考模型的相同点："><a href="#OSI与TCO参考模型的相同点：" class="headerlink" title="OSI与TCO参考模型的相同点："></a>OSI与TCO参考模型的相同点：</h5><ol><li>都分层</li><li>基于独立的协议栈的概念</li><li>可以实现异构网络互联</li></ol><h5 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h5><ol><li>OSI定义三点：服务、协议、接口</li><li>OSI先出现，参考模型先于协议发明，不偏向特定协议</li><li>TCP/IP设计之初就考虑到异构网互联问题，将IP作为重要层次。</li><li><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/OSI%E5%92%8CTCP%E4%B8%8D%E5%90%8C%E7%82%B94.png" alt="OSI和TCP不同点4"></li></ol><h5 id="五层参考模型："><a href="#五层参考模型：" class="headerlink" title="五层参考模型："></a>五层参考模型：</h5><p>理论模型，综合了OSI和TCP/IP的优点</p><ul><li>应用层：支持各种网络应用，FTP、SMTP、HTTP</li><li>传输层：进程-进程数据传输，TCP、UDP</li><li>网络层：源主机到摸底主机的数据分组陆游与转发，IP、ICMP、OSPF等</li><li>数据链路层：把网络层传下来的数据报组装成帧，Ethernet（以太网）、PPP</li><li>物理层：比特传输</li></ul><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E4%BA%94%E5%B1%82%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E5%B0%81%E8%A3%85.png" alt="五层参考模型封装"></p><p>报文、报文段、数据报、帧、比特</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.assets/%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84%20(2).png" alt="分层结构 (2)"></p><p>每个模型的层、功能、协议、三个模型的关系，相同点、不同点。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浪客剑心——对巴小姐的观感</title>
      <link href="/2022/05/16/lang-ke-jian-xin-guan-hou-gan/"/>
      <url>/2022/05/16/lang-ke-jian-xin-guan-hou-gan/</url>
      
        <content type="html"><![CDATA[<h1 id="你真是能唤来一场血雨的人呢——巴"><a href="#你真是能唤来一场血雨的人呢——巴" class="headerlink" title="你真是能唤来一场血雨的人呢——巴"></a>你真是能唤来一场血雨的人呢——巴</h1><p>找不到安身之所的人，难道不是你吗？不抱着刀就没法入睡。          ——巴<br>巴小姐是《浪客剑心》故事的灵魂。<br>生于落魄武士家族，和相爱的青梅竹马订婚，未婚夫却遭剑心杀害。没有武力的她抱着复仇的决心来到剑心身旁寻找他的弱点。<br>“你真是能唤来一场血雨的人呢”初见时巴这样说道，却慢慢发现这是一个心思纯洁的正在为自己是否该杀人纠结的十几岁的少年。<br>“你知道刀需要刀鞘么？你要杀人到几时，我要亲眼见证到底。”京都动乱，巴不顾自己安危，想要看着眼前的少年是如何无情的砍杀敌人，自己的未婚夫是不是也是这样被他砍杀。<br>最关键的动乱之后的隐居，假扮夫妻的时间中，剑心无需再杀人，开始种地，为了巴改善伙食。而巴也慢慢的习惯了平稳的生活，巴想明白了，杀了自己未婚夫的不是眼前的少年，而是这动乱的时代。剑心那为了天下太平的心和自己的未婚夫是同样的。两个人自然而然地相爱，相互救赎，剑心让巴放下了仇恨，重新拥抱幸福。巴让剑心有了挥剑的理由，找到了自己真正想守护的东西，而不再是为了新时代这一空头支票听命令杀人。<br>如果新时代已经到来，那么巴和剑心真的会一直这样生活下去：剑心等待着带巴一起去逛街而在屋外砍柴；巴因为剑心要带自己出门而精心打扮，出来时发现剑心已经砍了许多柴火；“让你久等了”。巴经过柴刀时影子使柴刀的锋芒暗淡了下去。<br>然而，他们所在的仍是动乱的幕末年代。巴的死亡注定了剑心作为人斩拔刀斋的终结，成为了剑心真正的鞘。留在剑心脸上的第二道疤痕和她未婚夫的一起，让剑心铭记了自己立下的不杀之誓。<br>新的时代到来了，巴已不在，只留下了使用逆刃刀的绯村剑心以及代替巴成为剑心守护之人的神谷薰。<br>（巴小姐真的绝美，相反感觉熏就是一个小姑娘，巴敢于独身接近仇人想办法复仇，而熏在剑心将被行刑之时只能在一旁看着哭泣。这样倒也合理，遇到巴时，剑心十几岁，仍是人斩拔刀斋；遇到熏时，剑心29岁，伤疤早已铭刻在脸上） </p><p>（一年前我怎么能写出这么羞耻的文字）<span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>作者：时光淡忘了永恒 <a href="https://www.bilibili.com/read/cv11489235">https://www.bilibili.com/read/cv11489235</a> 出处：bilibili</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用经验</title>
      <link href="/2022/05/16/hexo-shi-yong-jing-yan/"/>
      <url>/2022/05/16/hexo-shi-yong-jing-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo食用经验"><a href="#hexo食用经验" class="headerlink" title="hexo食用经验"></a>hexo食用经验</h1><h2 id="Git语句"><a href="#Git语句" class="headerlink" title="Git语句"></a>Git语句</h2><p><code>hexo clean</code>每次关闭博客？清除一下数据、</p><p><code>hexo g</code>（generate）创建一个博客</p><p><code>hexo s</code>（start）生成一个本地连接</p><p><code>hexo d</code>  (deploy)推到github上</p><p><code>cd +地址</code>进入文件夹</p><p><code>cd ..</code>返回上一级</p><p><code>ls -l</code>查看当前目录的文件</p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>下载主题：<code>git clone </code>+<code>地址.git</code>+<code> themes/主题名字</code></p><p>修改：在config.yml文件里，extensions下面themes，后面改成想换成的主题名字，修改好后记得clean+g+s</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/05/16/docker/"/>
      <url>/2022/05/16/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p>Docker文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><p>Docker仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><img src="Docker.assets/Docker%E7%BB%84%E6%88%90.jpg" style="zoom:67%;"><h3 id="镜像（image）："><a href="#镜像（image）：" class="headerlink" title="镜像（image）："></a>镜像（image）：</h3><p>Docker镜像就好比是一个模板，可以通过模板来创建容器服务，tomcat镜像=&gt; run =&gt;tomcat01容器 (提供服务器)，通过这个镜像可以创建多个容器（最终服务运行或者项目运行是在容器中）。</p><h3 id="容器（container）："><a href="#容器（container）：" class="headerlink" title="容器（container）："></a>容器（container）：</h3><p>Docker利用容器技术，独立运行一个或一个组应用，通过镜像来创建。</p><p>包含启动、停止、删除、基本命令。</p><p>目前可以把这个容器理解为一个简易的Linux系统</p><h3 id="仓库（repository）："><a href="#仓库（repository）：" class="headerlink" title="仓库（repository）："></a>仓库（repository）：</h3><p>仓库是存放镜像的地方。</p><p>分为私有仓库和共有仓库。</p><p>Docker Hub（默认是国外的）所以需要阿里云有容器服务器（配置镜像加速！）。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++问题汇总</title>
      <link href="/2022/05/16/c-wen-ti-hui-zong/"/>
      <url>/2022/05/16/c-wen-ti-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="C-问题汇总"><a href="#C-问题汇总" class="headerlink" title="C++问题汇总"></a>C++问题汇总</h1><h2 id="cout输出格式"><a href="#cout输出格式" class="headerlink" title="cout输出格式"></a>cout输出格式</h2><p><strong>以下要包含头文件<code>#include &lt;iomanip&gt;</code></strong></p><p>小数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float x=1.23456//fixed+setprecision()控制输出的小数点的个数cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;x&lt;&lt;endl;//结果为1.234//单独setprecision() 有效数字位数cout&lt;&lt;setprecision(3)&lt;&lt;x&lt;&lt;endl;//结果为1.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">流操纵算子</th><th align="left">作  用</th><th></th></tr></thead><tbody><tr><td align="left">*dec</td><td align="left">以十进制形式输出整数</td><td>常用</td></tr><tr><td align="left">hex</td><td align="left">以十六进制形式输出整数</td><td></td></tr><tr><td align="left">oct</td><td align="left">以八进制形式输出整数</td><td></td></tr><tr><td align="left">fixed</td><td align="left">以普通小数形式输出浮点数</td><td></td></tr><tr><td align="left">scientific</td><td align="left">以科学计数法形式输出浮点数</td><td></td></tr><tr><td align="left">left</td><td align="left">左对齐，即在宽度不足时将填充字符添加到右边</td><td></td></tr><tr><td align="left">*right</td><td align="left">右对齐，即在宽度不足时将填充字符添加到左边</td><td></td></tr><tr><td align="left">setbase(b)</td><td align="left">设置输出整数时的进制，b=8、10 或 16</td><td></td></tr><tr><td align="left">setw(w)</td><td align="left">指定输出宽度为 w 个字符，或输人字符串时读入 w 个字符</td><td></td></tr><tr><td align="left">setfill(c)</td><td align="left">在指定输出宽度的情况下，输出的宽度不足时用字符 c 填充（默认情况是用空格填充）</td><td></td></tr><tr><td align="left">setprecision(n)</td><td align="left">设置输出浮点数的精度为 n。  在使用非 fixed 且非 scientific 方式输出的情况下，n 即为有效数字最多的位数，如果有效数字位数超过 n，则小数部分四舍五人，或自动变为科学计 数法输出并保留一共 n 位有效数字。  在使用 fixed 方式和 scientific 方式输出的情况下，n 是小数点后面应保留的位数。</td><td></td></tr><tr><td align="left">setiosflags(flag)</td><td align="left">将某个输出格式标志置为 1</td><td></td></tr><tr><td align="left">resetiosflags(flag)</td><td align="left">将某个输出格式标志置为 0</td><td></td></tr><tr><td align="left">boolapha</td><td align="left">把 true 和 false 输出为字符串</td><td>不常用</td></tr><tr><td align="left">*noboolalpha</td><td align="left">把 true 和 false 输出为 0、1</td><td></td></tr><tr><td align="left">showbase</td><td align="left">输出表示数值的进制的前缀</td><td></td></tr><tr><td align="left">*noshowbase</td><td align="left">不输出表示数值的进制.的前缀</td><td></td></tr><tr><td align="left">showpoint</td><td align="left">总是输出小数点</td><td></td></tr><tr><td align="left">*noshowpoint</td><td align="left">只有当小数部分存在时才显示小数点</td><td></td></tr><tr><td align="left">showpos</td><td align="left">在非负数值中显示 +</td><td></td></tr><tr><td align="left">*noshowpos</td><td align="left">在非负数值中不显示 +</td><td></td></tr><tr><td align="left">*skipws</td><td align="left">输入时跳过空白字符</td><td></td></tr><tr><td align="left">noskipws</td><td align="left">输入时不跳过空白字符</td><td></td></tr><tr><td align="left">uppercase</td><td align="left">十六进制数中使用 A~E。若输出前缀，则前缀输出 0X，科学计数法中输出 E</td><td></td></tr><tr><td align="left">*nouppercase</td><td align="left">十六进制数中使用 a~e。若输出前缀，则前缀输出 0x，科学计数法中输出 e。</td><td></td></tr><tr><td align="left">internal</td><td align="left">数值的符号（正负号）在指定宽度内左对齐，数值右对 齐，中间由填充字符填充。</td><td></td></tr></tbody></table><p>流操作算子的使用方法</p><p>使用这些算子的方法是将算子用 &lt;&lt; 和 cout 连用。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; hex &lt;&lt; 12 &lt;&lt; "," &lt;&lt; 24;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条语句的作用是指定以十六进制形式输出后面两个数，因此输出结果是：<br>c, 18</p><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2><h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a><strong>一、问题描述</strong></h3><p>约瑟夫环问题是这样的：</p><p>0, 1, …, n - 10,1,…,n−1 这 nn 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 mm 个数字。求出这个圆圈里剩下的最后一个数字。</p><p>例如，0、1、2、3、40、1、2、3、4 这 5 个数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、12、0、4、1，因此最后剩下的数字是 33。</p><p>如下图所示。</p><p><img src="/C++%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.assets/1651627619-KhrukC-image.png" alt="image.png"></p><p>根据上图中的箭头，我们可以看到每一轮中移走的是第 mm 个数字（因为数组下标是从 00 开始，所以被移走的数字下标为 m - 1m−1）。<br>所以每一轮的第 m + 1m+1 个数字（下标为 mm），将成为下一轮的开头元素（下标变成 00）。</p><p>解法<br>解决约瑟夫环问题，我们采用倒推，我们倒推出：最后剩下的这个数字，在最开始的数组中的位置。</p><p>剩下最后一个数字（简称“它”）的时候，总个数为 1，它的下标 pos = 0pos=0。<br>那么它在上一轮也是安全的，总个数为 2，它的下标 pos = (0 + m) % 2pos=(0+m)%2； （解释：在上一轮中，它前面的数字（即红色的数字，下标为 m - 1m−1）被移走了；因此它的下标是 mm；由于是环，因此需要 % 2%2）<br>那么它在上上轮也是安全的，总个数为 3，它的下标 pos = ((0 + m) % 2 + m) % 3pos=((0+m)%2+m)%3；<br>那么它在上上上轮也是安全的，总个数为 4，它的下标 pos = (((0 + m) % 2 + m) % 3) % 4pos=(((0+m)%2+m)%3)%4；<br>…<br>那么它在游戏开始的第一轮也是安全的，总个数为 nn，它的下标 pospos 就是所求。<br>即如果从下向上反推的时候：假如它下一轮的下标为 pospos，那么当前轮次的下标就是 (pos + m) %(pos+m)% 当前轮次的人数。</p><p>最后，由于给出的数字是 nums = 0, 1, 2, .., n - 1nums=0,1,2,..,n−1，即 nums[i] = inums[i]=i，因此找出下标 pospos 就相当于找到这个数字。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int findTheWinner(int n, int k) {        //约瑟夫问题        int p=0;        for(int i=2;i&lt;=n;i++){            p=(p+k)%i;        }        return p+1;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="memset数组赋值"><a href="#memset数组赋值" class="headerlink" title="memset数组赋值"></a>memset数组赋值</h2><p><code>memset(type *p, int val , int ch )；</code></p><p>三个参数分别是首地址指针、要赋的值、数组的字节长度                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">给你一个长度为 n 的整数数组 nums ，其中 nums 的所有整数都在范围 [1, n] 内，且每个整数出现 一次 或 两次 。请你找出所有出现 两次 的整数，并以数组形式返回。class Solution {public:vector&lt;int&gt; findDuplicates(vector&lt;int&gt;&amp; nums) {int n = nums.size();vector&lt;int&gt; ans;int *p = new int[n];memset(p, 0, sizeof(int)*n);for (int i=0;i&lt;n;i++) {if (p[nums[i]-1] == 0) p[nums[i]-1] = 1;else if (p[nums[i]-1] == 1) ans.push_back(nums[i]);}return ans;}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看数据类型"><a href="#查看数据类型" class="headerlink" title="查看数据类型"></a>查看数据类型</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;typeinfo&gt;string s1 = "apple";cout &lt;&lt; typeid(s1.size()).name();//得到结果unsigned int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><p>如果想每次生成不一样的随机数，要事先调用<code>srand((unsigned)time(NULL))</code>，根据运行的系统时间生成随机数</p><p>然后调用rand产生一定范围的随机数。</p><pre class="line-numbers language-none"><code class="language-none">要取得[a,b)的随机整数，使用(rand() % (b-a))+ a;要取得[a,b]的随机整数，使用(rand() % (b-a+1))+ a;要取得(a,b]的随机整数，使用(rand() % (b-a))+ a + 1;通用公式:a + rand() % n；其中的a是起始值，n是整数的范围。要取得a到b之间的随机整数，另一种表示：a + (int)b * rand() / (RAND_MAX + 1)。要取得0～1之间的浮点数，可以使用rand() / double(RAND_MAX)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nth-element将数组第k数放到该在的位置"><a href="#nth-element将数组第k数放到该在的位置" class="headerlink" title="nth_element将数组第k数放到该在的位置"></a>nth_element将数组第k数放到该在的位置</h2><p>[每日一题]中遇到</p><p><code> nth_element(nums.begin(),nums.begin()+z,nums.end());</code></p><p>该行可以把数组nums的第z小的数放在nums[z+1]（begin()+z）上。</p><p>据说可以传第四个参数，compare，自定义比较函数。</p><h2 id="获取系统时间"><a href="#获取系统时间" class="headerlink" title="获取系统时间"></a>获取系统时间</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdlib.h&gt;system("time");//可直接打印，也可以加上cout&lt;&lt;//有点low，出问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//打印系统时间string gettime() {SYSTEMTIME sys;GetLocalTime(&amp;sys);char res[128];sprintf_s(res, "%4d/%02d/%02d %02d:%02d:%02d.%03d", sys.wYear, sys.wMonth, sys.wDay, sys.wHour, sys.wMinute, sys.wSecond, sys.wMilliseconds);return (string)res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化二维数组"><a href="#初始化二维数组" class="headerlink" title="初始化二维数组"></a>初始化二维数组</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, m ;cin &gt;&gt; n &gt;&gt; m;vector&lt;vector&lt;int&gt;&gt; matrix(m, vector&lt;int&gt;(n));for (int i = 0; i &lt; m; i++) {for (int j = 0; j &lt; n; j++) {matrix[i][j] = i;cout &lt;&lt; matrix[i][j];}cout &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">// 初始化一个 二维的matrix, 行M,列N,且值为0vector&lt;vector&lt;int&gt;&gt; matrix(M,vector&lt;int&gt;(N));//等价于下面的vector&lt;vector&lt;int&gt; &gt; matrix(M); for(int i=0;i&lt;M;i++) {    matrix[i].resize(N);}//等价于下面的vector&lt; vector&lt;int&gt; &gt; matrix;matrix.resize(M);//M行for(int i=0;i&lt;matrix.size();i++){    matrix[i].resize(N);//每一行都是N列}    // 初始化一个 二维的matrix, 行M,列N,且值自定义为data;vector&lt;vector&lt;int&gt;&gt; matrix(M,vector&lt;int&gt;(N,data));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/TP协议编程</title>
      <link href="/2022/05/16/tcptp-xie-yi-bian-cheng/"/>
      <url>/2022/05/16/tcptp-xie-yi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-x2F-TP协议编程"><a href="#TCP-x2F-TP协议编程" class="headerlink" title="TCP/TP协议编程"></a>TCP/TP协议编程</h1><p>蒋敏网课篇</p><h2 id="面向连接的套接字——TCP套接字"><a href="#面向连接的套接字——TCP套接字" class="headerlink" title="面向连接的套接字——TCP套接字"></a>面向连接的套接字——TCP套接字</h2><p>socket=套接字</p><p>分为</p><ul><li>TCP——面向连接的</li><li>UDP——面向无连接的</li></ul><h3 id="LInux下套接字编程"><a href="#LInux下套接字编程" class="headerlink" title="LInux下套接字编程"></a>LInux下套接字编程</h3><h4 id="1、创建套接字"><a href="#1、创建套接字" class="headerlink" title="1、创建套接字"></a>1、创建套接字</h4><p>调用socket函数创建套接字（安装电话）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;sys/socket.h&gt;int socket(int domain, int type, int protocol);//创建成功则返回文件描述符，失败返回-1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、分配地址信息"><a href="#2、分配地址信息" class="headerlink" title="2、分配地址信息"></a>2、分配地址信息</h4><p>调用bind函数分配IP地址和端口号（分配电话号码）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;sys/socket.h&gt;int bind(int sockfd, struct sockaddr *myaddr, socklen_t addr);//成功返回0，失败返回-1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、可接受连接状态"><a href="#3、可接受连接状态" class="headerlink" title="3、可接受连接状态"></a>3、可接受连接状态</h4><p>调用listen函数转为可接受请求状态。（连接电话线）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;sys/socket.h&gt;int listen(int sockfd, int backlog);//成功返回0，失败返回-1.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4、接受请求"><a href="#4、接受请求" class="headerlink" title="4、接受请求"></a>4、接受请求</h4><p>调用accept函数受理连接请求。（拿起话筒）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;sys/socket.h&gt;int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);//成功返回文件描述符，失败返回-1.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="服务器程序"><a href="#服务器程序" class="headerlink" title="服务器程序"></a>服务器程序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;sys/socket.h&gt;#include &lt;iostream&gt;int main(int argc, char *argv[]){int serv_sock;int clnt_sock;struct sockaddr_in serv_addr;struct sockaddr_in clin_addr;socklen_t clnt_addr_size;char message[] = "Hello world!";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Windows网络编程"><a href="#Windows网络编程" class="headerlink" title="Windows网络编程"></a>Windows网络编程</h2><h3 id="同时学Linux和Windows的原因"><a href="#同时学Linux和Windows的原因" class="headerlink" title="同时学Linux和Windows的原因"></a>同时学Linux和Windows的原因</h3><ul><li><p>大多数项目都在Linux操作系统下开发服务器端，而大多数客户端是在Windows平台下开发的。</p></li><li><p>有时候应用程序需要在两个平台之间相互切换。</p></li><li><p>两个平台下的套接字编程非常类似，学习效率比较高。</p></li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="winsock初始化"><a href="#winsock初始化" class="headerlink" title="winsock初始化"></a>winsock初始化</h4><ul><li>include头文件 winsock2.h</li><li>链接ws2_32.lib库<code>#pragma comment(lib,"ws2_32.lib"</code></li><li>Winsock初始化</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;winsock2.h&gt;//设置winsock版本信息//成功时返回0，失败时返回非零的错误代码值int WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>WSAStartup第一个参数：</p></blockquote><p><img src="/TCPTP%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B.assets/A55KB@8OZ2J%7B754QZ%7B8Q%5BE3.jpg"></p><blockquote><p>第二个参数lpWSADATA，需传入WSADATA型结构体变量地址（LPWSADATA是WSADATA的指针类型）。调用完函数后，相应参数中将填充已初始化的库信息</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(int argc, char* argv[]){    WSADATA wsaData;    //···    //万能模板,版本号2.2，wsaData用来接收返回值    if(WSAStartup(MAKEWORD(2,2), &amp;wsaData)!=0)        ErrorHandling("WSAStartup() error!");    //···    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Winsock库注销"><a href="#Winsock库注销" class="headerlink" title="Winsock库注销"></a>Winsock库注销</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;winsock2.h&gt;int WSAClenup(void);//成功返回0，失败返回SOCKET_ERROR。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于windows的套接字相关函数"><a href="#基于windows的套接字相关函数" class="headerlink" title="基于windows的套接字相关函数"></a>基于windows的套接字相关函数</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#inclued &lt;winsock2.h&gt;//创建套接字SOCKET socket(int af,int type, int protocol);//成功返回套接字句柄，失败返回INCALID_SOCKET//分配地址int bind(SOCKET s,const struct sockaddr * name, int namelen);//成功返回0，失败返回SOCKET_ERROR.//转为可接听状态int listen(SOCKET s,int backlog);//成功返回0，失败返回SOCKET_ERROR//接受连接函数请求SOCKET accept(SOCKET s, struct sockaddr * addr,int * addrlen);//成功返回套接字句柄，失败返回INVALID_SOCKET.int connect(SOCKET s, const struct sockaddr * name, int namelen);//成功返回0，失败返回SOCKET_ERROR 。 int closesocket(SOCKET s);//成功返回0，失败返回SOCKET_ERROR.//在关闭套接字时调用，Linux中，关闭文件和套接字都会调用close函数，而Windows中有专门用来关闭套接字的函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单对话TCP服务器端和客户端"><a href="#简单对话TCP服务器端和客户端" class="headerlink" title="简单对话TCP服务器端和客户端"></a>简单对话TCP服务器端和客户端</h3><h4 id="自探版本server"><a href="#自探版本server" class="headerlink" title="自探版本server"></a>自探版本server</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;WinSock2.h&gt;#pragma comment(lib,"ws2_32.lib")//加载ws2_32.dllusing namespace std;int main(int argv, char* argc[]){//初始化WSADATA wsaData;WSAStartup(MAKEWORD(2, 2), &amp;wsaData);//创建套接字SOCKET servSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);//绑定套接字struct sockaddr_in sockAddr;memset(&amp;sockAddr, 0, sizeof(sockAddr));//每个字节用0填充sockAddr.sin_family = PF_INET;//使用ipv4sockAddr.sin_addr.S_un.S_addr = inet_addr("192.168.43.9");sockAddr.sin_port = htons(8888);//端口bind(servSock, (SOCKADDR*)&amp; sockAddr, sizeof(SOCKADDR));//进入监听状态listen(servSock, 20);//接收客户端消息SOCKADDR clntAddr;int nSize = sizeof(SOCKADDR);SOCKET clntSock = accept(servSock, (SOCKADDR*)&amp; clntAddr, &amp;nSize);//向客户端发送消息const char* str = "hello client";send(clntSock, str, strlen(str) + sizeof(char), NULL);char szBuffer[MAXBYTE] = { 0 };recv(clntSock, szBuffer, MAXBYTE, NULL);cout &lt;&lt; "客户端：" &lt;&lt; szBuffer &lt;&lt; endl;//关闭套接字closesocket(clntSock);closesocket(servSock);//终止dll使用WSACleanup();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自探Clint"><a href="#自探Clint" class="headerlink" title="自探Clint"></a>自探Clint</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;WinSock2.h&gt;#pragma comment(lib,"ws2_32.lib")using namespace std;int main(int argv, char* argc[]){//初始化WSADATA wsaData;WSAStartup(MAKEWORD(2, 2), &amp;wsaData);//创建套接字SOCKET clntSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);//向服务器发送消息sockaddr_in sockAddr;memset(&amp;sockAddr, 0, sizeof(sockAddr));//每个字节都用0填充sockAddr.sin_family = PF_INET;sockAddr.sin_addr.S_un.S_addr = inet_addr("192.168.43.9");sockAddr.sin_port = htons(8888);connect(clntSock, (SOCKADDR*)&amp; sockAddr, sizeof(SOCKADDR));//接收服务器消息char szBuffer[MAXBYTE] = { 0 };recv(clntSock, szBuffer, MAXBYTE, NULL);//输出接收到的数据cout &lt;&lt; "服务端：" &lt;&lt; szBuffer &lt;&lt; endl;//向服务端发送消息const char* str = "hello serverlll";send(clntSock, str, strlen(str) + sizeof(char), NULL);//关闭套接字closesocket(clntSock);//终止dllWSACleanup();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scoket </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown使用基础</title>
      <link href="/2022/05/16/markdown-shi-yong-ji-chu/"/>
      <url>/2022/05/16/markdown-shi-yong-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown使用基础"><a href="#MarkDown使用基础" class="headerlink" title="MarkDown使用基础"></a>MarkDown使用基础</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="使用‘-’，一个＃是一级标题，最大，以此类推。"><a href="#使用‘-’，一个＃是一级标题，最大，以此类推。" class="headerlink" title="使用‘#’，一个＃是一级标题，最大，以此类推。"></a>使用‘#’，一个＃是一级标题，最大，以此类推。</h3><h6 id="最多支持六级标题"><a href="#最多支持六级标题" class="headerlink" title="最多支持六级标题######"></a>最多支持六级标题######</h6><p>可以使用快捷键，CTRL+数字1-6可以直接使用1~6级标题的格式。</p><h2 id="二、快捷键"><a href="#二、快捷键" class="headerlink" title="二、快捷键"></a>二、快捷键</h2><p>（手动试错hhh）</p><p>按照26键从左上到右下</p><table><thead><tr><th>CTRL+W</th><th>关闭当前文件</th></tr></thead><tbody><tr><td>CTRL+E</td><td>选中当前行</td></tr><tr><td>CTRL+T</td><td>创建表格（table）</td></tr><tr><td>CTRL+U</td><td><u>下划线</u>（under）</td></tr><tr><td>CTRL+I</td><td><em>斜体</em>（italics）</td></tr><tr><td>CTRL+O</td><td>用typora打开文件</td></tr><tr><td>CTRL+P</td><td>按文件名查找</td></tr><tr><td>CTRL+A</td><td>全选（ALL）</td></tr><tr><td>CTRL+S</td><td>保存（save）</td></tr><tr><td>CTRL+D</td><td>选中当前句子，遇到前后标点符号截止，英文好像略怪</td></tr><tr><td>CTRL+F</td><td>在当前文件中查找（找关键词、字等）（find）</td></tr><tr><td>CTRL+H</td><td>替换</td></tr><tr><td>CTRL+J</td><td>跳转到所选内容（jump）</td></tr><tr><td>CTRL+K</td><td><a href="https://blog.csdn.net/yangyangdt/article/details/121358515">超链接</a>(访问的时候要按着CTRL然后再点击，就可以浏览器进入了)<a href="##%E4%B8%80%E3%80%81%E6%A0%87%E9%A2%98">文件内跳转</a>好像是只能跳转到标题</td></tr><tr><td>CTRL+L</td><td>选中句子，到句号停止。</td></tr><tr><td>CTRL+Z</td><td>撤回</td></tr><tr><td>CTRL+X</td><td>剪切</td></tr><tr><td>CTRL+C</td><td>复制（copy）</td></tr><tr><td>CTRL+V</td><td>粘贴</td></tr><tr><td>CTRL+B</td><td>加粗（bold）</td></tr><tr><td>CTRL+N</td><td>新建一个笔记</td></tr><tr><td>Alt+shift+5</td><td><del>删除线</del></td></tr><tr><td>CTRL+数字1-6</td><td>使用1-6级标题格式</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="三、文字"><a href="#三、文字" class="headerlink" title="三、文字"></a>三、文字</h2><h3 id="1、删除线"><a href="#1、删除线" class="headerlink" title="1、删除线"></a>1、删除线</h3><p>使用波浪号，两个波浪号加想添加删除线的文字，然后再加两个波浪线~~~这就是删除线~~。</p><p><del>试试中文波浪号</del>，或者使用快捷键，<del>Alt+shift+5</del>(有点难记嗷)</p><h3 id="2、斜体"><a href="#2、斜体" class="headerlink" title="2、斜体"></a>2、斜体</h3><p>一个星号，，或者快捷键<em>CTRL+i</em>，斜体（italics）</p><p><code>*这就是斜体*</code></p><p><em>这就是斜体</em></p><h3 id="3、加粗"><a href="#3、加粗" class="headerlink" title="3、加粗"></a>3、加粗</h3><p>两个星号，<strong>这就是加粗</strong>，<code>**这就是加粗**</code>或者使用快捷键<strong>ctrl+B</strong>，粗体（bold）</p><p>如果使用了标题标签，标题是默认加粗的。</p><p>====</p><h3 id="4、斜体加加粗"><a href="#4、斜体加加粗" class="headerlink" title="4、斜体加加粗"></a>4、斜体加加粗</h3><p>三个星号，<em><strong>这就是斜体加粗</strong></em>，应该可以快捷键，<em><strong>CTRL+b再CTRL+i</strong></em></p><h3 id="5、下划线"><a href="#5、下划线" class="headerlink" title="5、下划线"></a>5、下划线</h3><p>使用html语言。用括号u包起来，或者快捷键<u>ctrl+u</u>，<u>可以直接把你刚刚输入的文字用下划线画起来</u><u></u></p><h3 id="6、高亮（黄底）"><a href="#6、高亮（黄底）" class="headerlink" title="6、高亮（黄底）"></a>6、高亮（黄底）</h3><p>==双等号==</p><h3 id="7、下标"><a href="#7、下标" class="headerlink" title="7、下标"></a>7、下标</h3><p>单个波浪线左右括起来，H<del>2</del>O，ln<del>e</del>A，大<del>下标</del>、</p><p>∫<del>a</del>^b^</p><h3 id="8、上标"><a href="#8、上标" class="headerlink" title="8、上标"></a>8、上标</h3><p>阶乘号^</p><p>X^2^Y</p><h3 id="9、表情"><a href="#9、表情" class="headerlink" title="9、表情"></a>9、表情</h3><p>打一个英文引号：<span class="github-emoji"><span>🈂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f202.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>然后海量表情任你选，只要你知道对应英文。</p><p>快捷键win+句号😋🙃🤭👼👴👁‍🗨</p><p><span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p> <span class="github-emoji"><span>😓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>：sweat</p><p><span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>：sweat_smile</p><h3 id="10、表格"><a href="#10、表格" class="headerlink" title="10、表格"></a>10、表格</h3><p>使用<code>|</code>来分隔不同的单元格，使用 <code> -</code> 来分隔表头和其他行，在分割线中使用 <code>:</code>来约束下方单元格的对齐方式。</p><p>左边加冒号是左对齐，右边加右对齐，两边都加居中  。</p><p>==快捷键CTRL+T创建表格==</p><pre class="line-numbers language-none"><code class="language-none">|name           | price ||:------------- | :---: ||fried chicken  |   19  ||cola           |   32  |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">name</th><th align="center">price</th></tr></thead><tbody><tr><td align="left">fried chicken</td><td align="center">19</td></tr><tr><td align="left">cola</td><td align="center">32</td></tr></tbody></table><h3 id="11、引用"><a href="#11、引用" class="headerlink" title="11、引用"></a>11、引用</h3><pre class="line-numbers language-none"><code class="language-none">&gt;这是引用哦&gt;&gt;二阶引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这是引用哦</p><blockquote><p>引用里还能套引用。</p></blockquote></blockquote><h3 id="12、列表"><a href="#12、列表" class="headerlink" title="12、列表"></a>12、列表</h3><h4 id="（1）无序列表"><a href="#（1）无序列表" class="headerlink" title="（1）无序列表"></a>（1）无序列表</h4><p><code>可以用 *、+、-然后按一下空格</code></p><ul><li>圣诞快乐</li></ul><h4 id="（2）有序列表"><a href="#（2）有序列表" class="headerlink" title="（2）有序列表"></a>（2）有序列表</h4><p><code>数字</code>+<code>.</code>+<code>空格</code></p><ol><li>是吧</li><li>对呀</li></ol><h3 id="13、代码块"><a href="#13、代码块" class="headerlink" title="13、代码块"></a>13、代码块</h3><p>三个单引号<code>`</code>,然后回车，可以选择语言，然后会跟代码一样有颜色区别显示。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(){cout&lt;&lt;"Hello world";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="14、分割线"><a href="#14、分割线" class="headerlink" title="14、分割线"></a>14、分割线</h3><p>三个或以上的星号、减号、下划线，*、-、_，然后直接回车</p><h3 id="15、跳转"><a href="#15、跳转" class="headerlink" title="15、跳转"></a>15、跳转</h3><p>格式：<code>[提示文字name](链接)</code></p><p>链接里填网址：<a href="https://www.baidu.com/">百度</a>，记得按住CTRL然后再点击。</p><p>链接里也可以加上标题：[10、表格](# 10、表格)，不管几级标题，一个＃就可以了。目前只能跳到标题。</p><h3 id="16、自动链接"><a href="#16、自动链接" class="headerlink" title="16、自动链接"></a>16、自动链接</h3><p>尖括号，里面加上网址。</p><p><code>&lt;https://www.baidu.com/&gt;</code></p><p><a href="https://www.baidu.com/">https://www.baidu.com/</a></p><h3 id="17、图片"><a href="#17、图片" class="headerlink" title="17、图片"></a>17、图片</h3><p><code>感叹号+中括号+小括号</code></p><p><code>![](图片地址)</code>地址可以使本地，也可以是网上的。</p><p>也可以截图，然后直接CTRL+V</p><h3 id="18、标头"><a href="#18、标头" class="headerlink" title="18、标头"></a>18、标头</h3><p>在md文件开头输入三个横杆—</p><p>然后回车</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDOwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS基础</title>
      <link href="/2022/05/16/html-css-ji-chu/"/>
      <url>/2022/05/16/html-css-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">从<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span>，有六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt; paragraph&lt;/p&gt; p元素会自动在其前后创建一些空白<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="lt-em-gt-标签"><a href="#lt-em-gt-标签" class="headerlink" title="<em>标签"></a><del><code>&lt;em&gt;</code>标签</del></h3><p>（不常用，CSS比较好）</p><p><code>&lt;em&gt;</code> 标签是一个短语标签，用来呈现为被强调的文本。</p><p>所有短语标签：</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;em&gt;</code></td><td>呈现为被强调的文本。</td></tr><tr><td><code>&lt;strong&gt;</code></td><td>定义重要的文本。</td></tr><tr><td><code>&lt;dfn&gt;</code></td><td>定义一个定义项目。</td></tr><tr><td><code>&lt;code&gt;</code></td><td>定义计算机代码文本。</td></tr><tr><td><code>&lt;samp&gt;</code></td><td>定义样本文本。</td></tr><tr><td><code>&lt;kbd&gt;</code></td><td>定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。</td></tr><tr><td><code>&lt;var&gt;</code></td><td>定义变量。您可以将此标签与 <code>&lt;pre&gt;</code> 及 <code>&lt;code&gt;</code> 标签配合使用。</td></tr></tbody></table><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span> 标签定义下标文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span> 标签定义上标文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p><code>&lt;b&gt;&lt;/b&gt;</code></p><h3 id="块级元素与行内元素"><a href="#块级元素与行内元素" class="headerlink" title="块级元素与行内元素"></a>块级元素与行内元素</h3><h3 id="HTML标签有两类："><a href="#HTML标签有两类：" class="headerlink" title="HTML标签有两类："></a>HTML标签有两类：</h3><p><strong>块级元素</strong></p><p>div、h1~h6、blockquote、dl、dt、dd、form、hr、ol、p、pre、table、ul …</p><p><strong>特点：</strong>总是在新行上开始，高度、行高以及顶和底边距都可控制，宽度缺省（默认）是它的容器的100%，除非设定一个宽度。</p><p><strong>功能：</strong>主要用来搭建网站架构、页面布局、承载内容。</p><p><strong>行内元素</strong></p><p>span、a、b、br、code、em、i、img、input、label、select、textarea …</p><p><strong>特点：</strong>和其他元素都在一行上，高、行高及顶和底边距不可改变，宽度就是它的文字或图片的宽度，不可改变。</p><p><strong>功能：</strong>用于加强内容显示,控制细节，例如：加粗、斜体等等。</p><h3 id="元素嵌套"><a href="#元素嵌套" class="headerlink" title="元素嵌套"></a>元素嵌套</h3><p>在HTML中元素是可以嵌套的。</p><p>HTML元素嵌套一般遵循以下规定：</p><ul><li>块级元素可以包含行内元素或某些块级元素，</li><li>行内元素不能包含块级元素，行内元素只能包含其它的行内元素</li><li><code>h1 - h6</code>、<code>p</code>、<code>dt</code> 这些块级元素，只能包含行内元素</li></ul><p>以上规定并非强制，不遵循以上规定进行嵌套，代码也是可以被执行的。</p><blockquote><p><strong>提示：</strong><br>行内元素也经常被称为“内联元素”</p></blockquote><p>通常被嵌套的块级子元素，需进行换行和缩进，以让代码更加易于阅读。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;    &lt;p&gt;第一段&lt;/p&gt;    &lt;p&gt;第二段&lt;/p&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>格式：<code>&lt;!--</code>+注释内容+<code>--&gt;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--这是一段注释。注释不会在浏览器中显示。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一段普通的段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="HTML5元素"><a href="#HTML5元素" class="headerlink" title="HTML5元素"></a>HTML5元素</h3><p>HTML5 引入了很多更具描述性的 HTML 元素</p><p>例如：<code>header</code>、<code>footer</code>、<code>nav</code>、<code>video</code>、<code>article</code>、<code>section</code>等。 </p><p>这些元素让 HTML 更易读，同时有助于搜索引擎优化和无障碍访问。</p><p> <code>main</code>元素让搜索引擎和开发者瞬间就能找到网页的主要内容。 </p><p>举个例子, 下面的 <code>main</code> 元素嵌套了两个子元素：</p><pre class="line-numbers language-none"><code class="language-none">&lt;main&gt;   &lt;h1&gt;Hello World&lt;/h1&gt;  &lt;p&gt;Hello Paragraph&lt;/p&gt;&lt;/main&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/HTML+CSS.assets/202011121738216219.jpg" alt="img"> </p><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><p>HTML 用<code>img</code>元素来为你的网站添加图片，其中<code>src</code>属性指向一个图片的地址。 </p><p><strong>示例：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;img src="图片的地址"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong><code>img</code>是单标签元素, 没有结束标签(闭合标签)。 </p><p><strong>alt 属性</strong></p><p><code>img</code>元素<code>alt</code>属性中的文本是当图片无法加载时显示的替代文本。 </p><p><strong>示例</strong>:</p><p>让我们给上面例子的<code>img</code>添加<code>alt</code>属性。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src="图片的地址" alt="坐在桌子上的兔子"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="外部链接（超链接）"><a href="#外部链接（超链接）" class="headerlink" title="外部链接（超链接）"></a>外部链接（超链接）</h3><p>HTML 通过使用 <code>&lt;a&gt;</code> 标签在 HTML 中创建链接。</p><p>下面是一张<code>a</code>元素的图示。</p><p><img src="/HTML+CSS.assets/1602320286820993.png" alt="img"></p><h3 id="alt文本留空"><a href="#alt文本留空" class="headerlink" title="alt文本留空"></a>alt文本留空</h3><p>有些情况下<code>alt</code>属性似乎有些多余。</p><p>比如用来充当背景的图片。 </p><p>如果省略 <code>alt</code> 属性，则表明该图像是内容的关键部分，但没有等效的文本可用。<br>如果把这个属性设置为空字符串（<code>alt=""</code>），</p><p>则表明该图像<em>不是</em>内容的关键部分（这是一种装饰或者一个追踪像素点），</p><p>非可视化浏览器在渲染的时候可能会忽略它。</p><p>而且，如果图片加载失败，可视化浏览器会隐藏表示图片损坏的图标。</p><p>例如： </p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;alt 文本留空&lt;/p&gt;&lt;img src="theme3bg.jpeg" &gt; &lt;hr&gt;&lt;img src="theme3bg.jpeg" alt=""&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果:</strong></p><p><img src="/HTML+CSS.assets/1603261146622396.png" alt="img"></p><p><strong>注意：</strong><br>我们可以发现第二张图片,加了​<code>alt=""</code>​ 当图片不能正常加载也不会显示裂图图标，所以美观起见还是要加上 ​<code>alt </code>​属性。</p><h3 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h3><p><code>a</code>元素也可以用在网页内不同区域的跳转。</p><p>设置<code>a</code>元素的 <code>href </code>属性值为井号<code>#</code>加上想跳转区域对应的<code>id</code>属性值，这样就可以创建一个内部跳转。</p><p><code>id</code>是用来描述网页元素的一个属性，它的值在整个页面中唯一。</p><p>当用户点击了<code>Contacts Us</code>链接，页面就会跳转到网页的<strong>Contacts Us</strong>区域。</p><p>例如:</p><p><img src="/HTML+CSS.assets/1602323512972094.gif" alt="arch1"></p><h3 id="固定连接"><a href="#固定连接" class="headerlink" title="固定连接"></a>固定连接</h3><p>有时你想要在你的网站上添加一个 <code>a</code> 元素，</p><p>但你还不知道将它链接到哪里，这时你可以使用固定连接。</p><p>把 <code>a</code> 元素的 <code>href</code> 属性的值替换为一个 <code>#</code> （# 也称为哈希符号），可将其转换为一个固定链接。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p><code>&lt;ul&gt;</code> 标签定义无序列表。</p><p>将 <code>&lt;ul&gt;</code> 标签与 <code>&lt;li&gt; </code>标签一起使用，创建无序列表。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;h4&gt;一个无序列表：&lt;/h4&gt;&lt;ul&gt;  &lt;li&gt;咖啡&lt;/li&gt;  &lt;li&gt;茶&lt;/li&gt;  &lt;li&gt;牛奶&lt;/li&gt;&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果:</strong></p><p><img src="/HTML+CSS.assets/1602657271601529.png" alt="img">**<br>**</p><p>我们可以看到无序列表默认在子项前面加了实心小黑点，</p><p>这个小黑点可以通过 CSS 调整成其他样子比如菱形。</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p><code>&lt;ol&gt;</code> 标签定义了一个有序列表. 列表排序以数字来显示。</p><p>使用<code>&lt;li&gt;</code> 标签来定义列表选项。</p><p><code>ol</code>标签有<code>start</code>属性，可以定义列表的开始序号。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>咖啡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>牛奶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>茶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建文本输入框"><a href="#创建文本输入框" class="headerlink" title="创建文本输入框"></a>创建文本输入框</h3><p>文本输入框是获取用户输入的一种方便的方法。</p><p><code>&lt;input&gt;</code> 标签规定用户可输入数据的输入字段。</p><p>根据不同的<code> type</code> 属性，输入字段有多种形态。</p><pre class="line-numbers language-none"><code class="language-none">text：文本框<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入字段可以是文本字段、复选框、密码字段、单选按钮、按钮等等。</p><p>创建文本输入框<code> type</code> 属性的值为 <code>text</code>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意:</strong><code>input</code>元素是单标签元素 。</p><blockquote><p><strong>设置预期值的提示信息</strong></p></blockquote><p>input 元素的<code>placeholder</code> 属性提供可描述输入字段预期值的提示信息（hint）。</p><p>该提示会在输入字段为空时显示，并会在字段获得焦点时消失。</p><p>例如:</p><p><img src="/HTML+CSS.assets/1602554585287745.gif" alt="formplaceh"></p><p><strong>注意：</strong></p><p>placeholder 属性适用于以下的 <input> 类型：text, search, url, telephone, email 以及 password。</p><blockquote><p> <code>placeholder</code> 属性是 HTML5 中的新属性。</p></blockquote><h3 id="创建表单"><a href="#创建表单" class="headerlink" title="创建表单"></a>创建表单</h3><p><code>&lt;form&gt; </code>标签用于创建供用户输入的 HTML 表单。</p><p><code>&lt;form&gt;</code>标签的<code>action</code>属性的值指定了表单提交到服务器的地址。</p><p><img src="/HTML+CSS.assets/1602658673991728.gif" alt="5"></p><p><code>&lt;form&gt;</code> 元素包含一个或多个如下的表单元素：</p><pre class="line-numbers language-none"><code class="language-none">&lt;input&gt;&lt;textarea&gt;&lt;button&gt;&lt;select&gt;&lt;option&gt;&lt;optgroup&gt;&lt;fieldset&gt;&lt;label&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（提交）按钮"><a href="#（提交）按钮" class="headerlink" title="（提交）按钮"></a>（提交）按钮</h3><p>一对<code>button</code>，type=<code>submit</code>时点击会将信息发送给form的action属性的服务器地址？</p><h3 id="表单必填设置"><a href="#表单必填设置" class="headerlink" title="表单必填设置"></a>表单必填设置</h3><p>你可以在表单中指定某些选项为<code>required</code>（必填项），</p><p>只有当用户填写了该选项后，用户才能够提交表单。</p><p>例如： </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加单选框"><a href="#添加单选框" class="headerlink" title="添加单选框"></a>添加单选框</h3><p>如果你希望用户在表单只给出一个答案,</p><p>例如选择性别, 那么你可以用<code>单选框</code>。</p><p>单选框是 <code>input</code> 输入框的一种类型, <code>type</code> 属性的值为 <code>radio</code>。</p><p>每个单选按钮都应该嵌套在自己的 <code>label(标签)</code> 元素中。</p><p>所有关联的单选按钮应具有相同的 <code>name</code> 属性。</p><p>例如:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo/demo_form.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="/HTML+CSS.assets/1602659534983861.png" alt="img"></p><h3 id="添加复选框"><a href="#添加复选框" class="headerlink" title="添加复选框"></a>添加复选框</h3><p><code>checkboxes（</code>复选框<code>）</code>通常用于可能有多个答案的问题形式。</p><p>复选框是 <code>input</code> 的输入框的一种类型。</p><p>每一个复选框都应嵌套在其自己的 <code>label</code>元素中。</p><p>所有关联的复选框输入应该具有相同的 <code>name</code>属性。</p><p>例如:</p><pre class="line-numbers language-none"><code class="language-none">&lt;form action="/demo/demo_form.php"&gt;  &lt;label&gt;&lt;input type="checkbox" name="vehicle" value="Bike"&gt;I have a bike&lt;/label&gt;  &lt;label&gt;&lt;input type="checkbox" name="vehicle" value="Car"&gt;I have a car &lt;/label&gt;  &lt;label&gt;&lt;input type="checkbox" name="vehicle" value="skateboard"&gt;I have a skateboard &lt;/label&gt;  &lt;br&gt;&lt;br&gt;  &lt;input type="submit"&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试一下</p><p><strong>运行结果:</strong></p><p><img src="/HTML+CSS.assets/1602660100956705.png" alt="img"></p><blockquote><p>默认选中（单选多选通用）</p><p>在input标签最后添加<code>checked</code>。</p></blockquote><h3 id="div-元素嵌套"><a href="#div-元素嵌套" class="headerlink" title="div 元素嵌套"></a>div 元素嵌套</h3><p><code>div</code> 元素，也被称作division(层)元素，是一个盛装其他元素的通用容器。</p><p><code>div</code> 元素是最常用的HTML元素。</p><p><code>&lt;div&gt;</code>是双标签,</p><div></div>需成对出现。<p></p><p>例如：</p><p><img src="/HTML+CSS.assets/1602584941410208.png" alt="img"></p><h3 id="id属性"><a href="#id属性" class="headerlink" title="id属性"></a>id属性</h3><p>每一个 HTML 元素都可以具有 <code>id</code> 属性。</p><p><code>id</code> 属性规定 HTML 元素的唯一的 id。</p><p><code>id</code> 属性是唯一的。虽然浏览器不会强制唯一，但这是被广泛认可的。</p><p>所以同一个页面不要给一个以上的元素相同的 <code>id</code> 属性。</p><p><strong>注意:</strong> </p><p>id 属性可用作链接锚（link anchor），通过 JavaScript（HTML DOM）或通过 CSS 为带有指定 id 的元素改变或添加样式。</p><h3 id="HTML的body元素"><a href="#HTML的body元素" class="headerlink" title="HTML的body元素"></a>HTML的body元素</h3><p><code>body</code>是一个简单的HTML稳定最基本的必需元素。</p><p><code>&lt;body&gt;</code> 标签定义文档的主体。</p><p><code>&lt;body&gt;</code> 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等）。</p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602755590210373.png" alt="img"></p><h2 id="HTML-网页结构"><a href="#HTML-网页结构" class="headerlink" title="HTML 网页结构"></a>HTML 网页结构</h2><p>下面是一个可视化的HTML页面结构：</p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602755689350297.png" alt="img"></p><p><strong>注意：</strong></p><p>只有 <code>&lt;body&gt; </code>区域 (白色部分) 才会在浏览器中显示。</p><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h3 id="更改文本的颜色"><a href="#更改文本的颜色" class="headerlink" title="更改文本的颜色"></a>更改文本的颜色</h3><p>我们通过修改<code>h2</code>元素的<code>style</code>属性的<code>color</code>值来改变文本颜色。</p><p>以下是改变<code>h2</code>元素为蓝色的方法：</p><pre class="line-numbers language-none"><code class="language-none">&lt;h2 style="color: red;"&gt;兔子&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: 行内<code>style</code>最好以<code>;</code>来结束。</p><h3 id="使用-lt-style-gt-标签为元素定义CSS样式"><a href="#使用-lt-style-gt-标签为元素定义CSS样式" class="headerlink" title="使用<style>标签为元素定义CSS样式"></a>使用<code>&lt;style&gt;</code>标签为元素定义CSS样式</h3><p>在 CSS 中，页面样式的属性有几百个，但常用的不过几十个。</p><p>当你输入<code>&lt;h2 style="color: red"&gt;兔子&lt;/h2&gt;</code>时，你就给<code>h2</code>元素添加了<code>inline style(内联样式)</code>。</p><p>这是添加元素的样式的一种方法，但更好的方法是使用<code>CSS</code>，它代表<code>(Cascading Style Sheets)层叠样式表</code>。````</p><p>在代码的顶端，创建一个如下所示的style元素：</p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这个style元素的内部, 你可以为所有<code>h2</code>元素创建一个<code>CSS</code>选择器。</p><p>例如，如果你希望所有的<code>h2</code>元素都设置为红色, 则你的样式元素将如下所示：</p><pre class="line-numbers language-none"><code class="language-none">&lt;style type="text/css"&gt;  h2 {    color: red;  }&lt;/style&gt;普通文本内容&lt;h2&gt;h2文本内容,&lt;span&gt;h2内span文本&lt;/span&gt;&lt;/h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-class-选择器设置样式"><a href="#使用-class-选择器设置样式" class="headerlink" title="使用 class 选择器设置样式"></a>使用 class 选择器设置样式</h3><p>CSS 的<code>class</code>具有可重用性，可应用于各种 HTML 元素。 </p><p><strong>例如:</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;!--类名前有一个点号（.）--&gt;&lt;style&gt;  .blue-text {    color: blue;  }&lt;/style&gt;&lt;h2 class="blue-text"&gt;兔子&lt;/h2&gt;&lt;p class="blue-text"&gt;小兔子是很可爱的动物&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到，在<code>&lt;style&gt;</code>样式声明区域里，创建了一个名为<code>blue-text</code>的<code>class</code>选择器。 </p><p><code>blue-text</code> 会选择所有HTML元素的<code>class</code>属性包含 <code>blue-text</code> 的元素</p><p>注意：在<code>style</code>样式区域声明里，<code>class</code>需以<code>.</code>开头。而在 HTML 元素里，<code>class</code>属性的前面不能添加<code>.</code>。</p><h3 id="设置字体大小"><a href="#设置字体大小" class="headerlink" title="设置字体大小"></a>设置字体大小</h3><p>在CSS中，通过 <code>font-size</code> 属性来设置元素中所包含文本的字体大小。</p><p>如果一个元素没有显式定义<code>font-size</code>属性，则会自动继承父元素的 <code>font-size</code>属性的计算结果。</p><p>定义 <code>font-size</code> 时，可以使用预定义关键字、绝对尺寸、相对尺寸：</p><h4 id="预定义关键字"><a href="#预定义关键字" class="headerlink" title="预定义关键字"></a><strong>预定义关键字</strong></h4><p>有 xx-small、x-small、small、medium、large、x-large、xx-large，尺寸按顺序依次增大，类似于衣服的尺寸。</p><h4 id="绝对尺寸"><a href="#绝对尺寸" class="headerlink" title="绝对尺寸"></a><strong>绝对尺寸</strong></h4><p>有px（像素）、pt（点，1pt 相当于 1/72in）、in（英寸）、cm（厘米）、mm（毫米）等。</p><h4 id="相对尺寸"><a href="#相对尺寸" class="headerlink" title="相对尺寸"></a><strong>相对尺寸</strong></h4><p>有 em、%、rem，它们都是相对于某个参考基准的字体大小，来计算当前字体的大小，只是参考基准不同而已。</p><p><strong>比较常用的单位有 px，%， rem；</strong></p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">h1 {  font-size: 32px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置元素字体"><a href="#设置元素字体" class="headerlink" title="设置元素字体"></a>设置元素字体</h3><p>通过<code>font-family</code>属性，可以设置元素里面的字体样式。</p><p><code>font-family</code> 可以把设置多个字体名称。如果浏览器不支持第一个字体，则会尝试下一个。</p><p>例如你想设置<code>h2</code>元素的字体为<code>sans-serif</code>，你可以用以下的 CSS 规则：</p><pre class="line-numbers language-none"><code class="language-none">h2 {  font-family: sans-serif;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="引入外部字体"><a href="#引入外部字体" class="headerlink" title="引入外部字体"></a>引入外部字体</h3><p>除了大多数系统提供的默认字体以外，我们也可以使用自定义字体。</p><p>我们可以通过在 CSS 里面设置字体的 URL 来引用。</p><p>例如,我们需要引入<code>Lobster</code>字体。</p><p>将下代码段放到<code>style</code>标签之前。 </p><pre class="line-numbers language-none"><code class="language-none">&lt;link href="https://fonts.loli.net/css?family=Lobster" rel="stylesheet" type="text/css"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你就可以设置<code>font-family</code>属性为<code>Lobster</code>，来使用<code>Lobster</code>字体。</p><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">font-family: FAMILY_NAME, GENERIC_NAME;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>GENERIC_NAME</code>是可选的，如果浏览器不支持第一个字体，则会尝试下一个。</p><p><strong>注意:</strong></p><p>字体名区分大小写，并且如果字体名含有空格，需要用引号括起来。</p><p><strong>例如:</strong> 使用<code>"Open Sans"</code>字体需要添加引号，而<code>Lobster</code>字体则不需要。</p><h3 id="降级使用字体"><a href="#降级使用字体" class="headerlink" title="降级使用字体"></a>降级使用字体</h3><p>几乎所有浏览器都有支持几种通用字体。比如: <code>monospace</code>，<code>serif</code>和<code>sans-serif</code>。 </p><p>当字体不可用，浏览器可以 “降级” 去使用其他字体。</p><p>如果你想当<code>Helvetica</code>不可用时，降级使用<code>sans-serif</code>字体，那么可以这样写：</p><pre class="line-numbers language-none"><code class="language-none">p {  font-family: Helvetica, sans-serif;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>**提示:<br>**通用字体名字不区分大小写。也不需要使用引号，因为它们是 CSS 关键字。</p></blockquote><h3 id="调整图片大小"><a href="#调整图片大小" class="headerlink" title="调整图片大小"></a>调整图片大小</h3><p>CSS 的<code>width</code>属性和 <code>height</code>属性 可以控制元素的宽度和高度。</p><p>图片的<code>width</code>宽度单位类似于字体的<code>px</code>（像素)值。 </p><p>例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">.larger-image</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码设置<code>class</code>属性包含 <code>larger-image</code> 的元素的宽高为400px。</p><h3 id="给元素添加边框"><a href="#给元素添加边框" class="headerlink" title="给元素添加边框"></a>给元素添加边框</h3><p>CSS边框属性允许你指定一个元素边框的样式和颜色, 和边框宽度。</p><p>可以使用 <strong>border</strong> 属性将边框样式,颜色,和宽度 一起设置。</p><p>如果不设置其中的某个值，也不会出问题，比如<code> border: solid #ff0000;</code> 也是允许的。</p><p>例如:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">p</span> <span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span>5px solid red<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Some text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示:</p><p>记得在一个元素上可以同时应用多个<code>class</code>，通过使用空格来分隔。</p><p>例子： <code>&lt;img class="class1 class2"&gt;</code></p><h3 id="使用border-style属性设置边框样式"><a href="#使用border-style属性设置边框样式" class="headerlink" title="使用border-style属性设置边框样式"></a>使用border-style属性设置边框样式</h3><h4 id="边框样式"><a href="#边框样式" class="headerlink" title="边框样式"></a>边框样式</h4><p>边框样式属性指定要显示什么样的边界。</p><p>除了在 <code>border</code> 属性里面设置边框样式， </p><p>还可以使用<code>border-style</code>属性来定义边框的样式</p><h4 id="border-style-值"><a href="#border-style-值" class="headerlink" title="border-style 值:"></a>border-style 值:</h4><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;p.none {border-style:none;}p.dotted {border-style:dotted;}p.dashed {border-style:dashed;}p.solid {border-style:solid;}p.double {border-style:double;}p.groove {border-style:groove;}p.ridge {border-style:ridge;}p.inset {border-style:inset;}p.outset {border-style:outset;}p.hidden {border-style:hidden;}&lt;/style&gt;&lt;p class="none"&gt;无边框。&lt;/p&gt;&lt;p class="dotted"&gt;虚线边框。&lt;/p&gt;&lt;p class="dashed"&gt;虚线边框。&lt;/p&gt;&lt;p class="solid"&gt;实线边框。&lt;/p&gt;&lt;p class="double"&gt;双边框。&lt;/p&gt;&lt;p class="groove"&gt; 凹槽边框。&lt;/p&gt;&lt;p class="ridge"&gt;垄状边框。&lt;/p&gt;&lt;p class="inset"&gt;嵌入边框。&lt;/p&gt;&lt;p class="outset"&gt;外凸边框。&lt;/p&gt;&lt;p class="hidden"&gt;隐藏边框。&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试一下</p><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a><strong>运行结果:</strong></h4><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602743055911761.png" alt="img"></p><h3 id="使用border-color属性设置边框颜色"><a href="#使用border-color属性设置边框颜色" class="headerlink" title="使用border-color属性设置边框颜色"></a>使用border-color属性设置边框颜色</h3><p><code>border-color</code>属性用于设置边框的颜色。可以设置的颜色：</p><ul><li>name - 指定颜色的名称，如 “red”</li><li>RGB - 指定 RGB 值, 如 “rgb(255,0,0)”</li><li>Hex - 指定16进制值, 如 “#ff0000”</li></ul><p>您还可以设置边框的颜色为 <code>"transparent"(继承父亲)</code>。</p><p><strong>注意：</strong> </p><p><code>border-color</code>单独使用是不起作用的，必须得先使用<code>border-style</code>来设置边框样式。</p><h3 id="使用border-width属性设置边框宽度"><a href="#使用border-width属性设置边框宽度" class="headerlink" title="使用border-width属性设置边框宽度"></a>使用border-width属性设置边框宽度</h3><h4 id="边框宽度"><a href="#边框宽度" class="headerlink" title="边框宽度"></a>边框宽度</h4><p>你可以通过<code>border-width</code>属性为边框指定宽度。</p><p>为边框指定宽度有两种方法：</p><p>可以指定长度值，比如 2px，</p><p>或者使用 关键字 <code>thick(厚的) 、medium（默认值） 和 thin</code>。</p><p><strong>注意：</strong></p><p>CSS 没有定义 3 个关键字的具体宽度，</p><p>所以一个用户可能把 thick 、medium 和 thin 分别设置为等于 5px、3px 和 2px，</p><p>而另一个用户则分别设置为 3px、2px 和 1px。</p><h4 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h4><p><code>border-radius</code>可以设置边框为圆角，参数为像素，xxpx;</p><p>或者百分数。50%时得到圆形，如果图片本身是长方形，则会得到椭圆形图片。</p><h3 id="元素添加背景色"><a href="#元素添加背景色" class="headerlink" title="元素添加背景色"></a>元素添加背景色</h3><p><code>background-color</code>属性可以设置元素的背景颜色。</p><p>元素的背景是元素的总大小，包括填充和边界（但不包括边距）。</p><p>（一般设置一个class，带着这个背景色）</p><h3 id="使用-id-属性设定元素样式"><a href="#使用-id-属性设定元素样式" class="headerlink" title="使用 id 属性设定元素样式"></a>使用 id 属性设定元素样式</h3><p>和<code>class</code>一样，也可以使用 <code>id</code> 属性设定元素样式，</p><p>并且<code>id</code>不可以重用，只应用于一个元素上。</p><p>在 CSS 里，<code>id</code>的优先级要高于<code>class</code>，如果一个元素同时应用了<code>class</code>和<code>id</code>，并设置样式有冲突，会优先应用<code>id</code>的样式。</p><p>例如:</p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;#my-background {    background-color: green;}.my-background {background-color: red;}&lt;/style&gt;&lt;div id="my-background" class="my-background"&gt;id的优先级要高于class&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试一下</p><p><strong>运行结果:</strong></p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602748889959457.png" alt="img"></p><p><strong>注意:</strong></p><p>在声明 id 的时候，必须在名字前插入<code>#</code>符号。</p><h3 id="设置元素边距"><a href="#设置元素边距" class="headerlink" title="设置元素边距"></a>设置元素边距</h3><p>所有的 <code>HTML </code>元素基本都是以矩形为基础。</p><p>每个 HTML 元素周围的矩形空间由三个重要的属性来控制：</p><pre class="line-numbers language-none"><code class="language-none">padding（内边距）margin（外边距）border（边框）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>padding</code>控制着元素内容与<code>border</code>之间的空隙大小。</p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602749938206402.png" alt="img"></p><p>我们可以看到蓝色盒子和红色盒子都在黄色盒子里面。</p><p>红色盒子比蓝色盒子有着更多的<code>padding</code>填充空间。</p><p>当你增加蓝色盒子的padding值，文本内容与边框的距离会逐渐拉大。</p><p>CSS 允许你使用<code>padding-top</code>，<code>padding-right</code>， <code>padding-bottom</code>和<code>padding-left</code>属性来设置四个不同方向的<code>padding</code>值。</p><p><code>margin</code>同理。</p><p>如图:</p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602751498650000.png" alt="img"></p><p>不需要每次都要分别声明 <code>padding-top</code>，<code>padding-right</code>，<code>padding-bottom</code>和<code>padding-left</code>属性，</p><p>也可以把它们汇总在<code>padding</code>属性里面声明，如下：</p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602753207239854.png" alt="img"></p><p>这四个值按顺时针排序：上，右，下，左，并且设置的效果等同于特定声明每一个方向的<code>padding</code>。</p><h3 id="使用属性选择器设定样式"><a href="#使用属性选择器设定样式" class="headerlink" title="使用属性选择器设定样式"></a>使用属性选择器设定样式</h3><p>除了 ID 选择器和 Class 选择器,另外，也还有属性选择器，可以让我们给特定的元素设置样式。</p><p>语法:</p><pre class="line-numbers language-none"><code class="language-none">[属性名 过滤符号 属性值] {}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，下面的代码会改变所有元素中包含type属性且值为radio的元素的外边距。</p><pre class="line-numbers language-none"><code class="language-none">[type='radio'] {  margin: 20px 0px 20px 0px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="绝对单位-amp-相对单位"><a href="#绝对单位-amp-相对单位" class="headerlink" title="绝对单位&amp;相对单位"></a>绝对单位&amp;相对单位</h3><p><code>像素px</code>是一种长度单位，来告诉浏览器应该如何调整元素大小和空间大小。</p><p>其实除了像素，CSS 也有其他不同的长度单位供我们使用。</p><p>单位长度的类型可以分成 2 种，一种是相对的，一种是绝对的。</p><p>如图:</p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602754984641337.png" alt="img"></p><p><strong>绝对长度单位,</strong> 会接近屏幕上的实际测量值，不过不同屏幕的分辨率会存在差异，可能会导致一些误差。</p><p><strong>相对单位长度</strong>，就像em和rem，它们会依赖其他长度的值。</p><p>例如, <code>em</code>的大小基于元素的字体的<code>font-size</code>值，</p><p>如果你使用<code>em</code>单位来设置<code>font-size</code>值，它的值会跟随父元素的<code>font-size</code>值来改变。</p><p><strong>注意：</strong></p><p>有些单位长度选项是相对视窗大小来改变值的，符合了响应式 web 的设计原则。</p><h3 id="CSS样式表继承"><a href="#CSS样式表继承" class="headerlink" title="CSS样式表继承"></a>CSS样式表继承</h3><p>要想了解css样式表的继承，我们先从文档树（HTML DOM）开始。文档树由HTML元素组成。</p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602756778131035.png" alt="img"></p><p>文档树和家族树类似，也有祖先、后代、父亲、孩子和兄弟^_^。</p><p><strong>那么CSS<strong><strong>样式表继承指的是，特定的CSS</strong></strong>属性向下传递到子孙元素。</strong></p><p>例如:(有如下结构)</p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602756921315067.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;p { color:red; }&lt;/style&gt;&lt;p&gt;CSS样式表&lt;em&gt;继承特性&lt;/em&gt;的演示代码&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试一下</p><p><strong>运行结果:</strong></p><p><img src="/HTML+CSS%E5%9F%BA%E7%A1%80.assets/1602756946209098.png" alt="img">**<br>**</p><p>在浏览器中<code>p </code>和 <code>em</code> 字体同时变红。</p><p>我们并没有指定<code>em</code>的样式，但<code>em</code>继承了它的父亲元素<code>p</code>的样式特性。</p><p><strong>注意:</strong></p><p><strong>当然也不是所有的css属性都会被子类继承</strong>，例如<code>border</code>属性。</p><h3 id="样式中的优先级"><a href="#样式中的优先级" class="headerlink" title="样式中的优先级"></a>样式中的优先级</h3><p><strong>CSS 优先规则1：</strong> 最近的祖先样式比其他祖先样式优先级高。</p><p><strong>CSS 优先规则2：</strong>“直接样式”比”祖先样式”优先级高。</p><p><strong>CSS 优先规则3：</strong>优先级关系：内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器</p><p><strong>CSS 优先规则4：</strong>属性后插有 !important 的属性拥有最高优先级。</p><p><strong>CSS 优先规则5：</strong>第二个声明始终优于第一个声明。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>文档的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> monospace<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">#orange-text</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.pink-text</span> <span class="token punctuation">{</span>//加！important，优先级最高        <span class="token property">color</span><span class="token punctuation">:</span> pink <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.blue-text</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>//class内后一个优先前一个，id优先于class，style优先于id。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orange-text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue-text pink-text<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>white</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/15/hello-world/"/>
      <url>/2022/05/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
